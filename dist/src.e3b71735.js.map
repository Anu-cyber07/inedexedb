{"version":3,"sources":["node_modules/safari-14-idb-fix/dist/index.js","node_modules/idb-keyval/dist/compat.js","src/index.ts"],"names":["idbReady","isSafari","intervalId","navigator","userAgentData","test","userAgent","indexedDB","databases","Promise","resolve","tryIdb","finally","setInterval","clearInterval","defaultGetStoreFunc","promisifyRequest","request","reject","oncomplete","onsuccess","result","onabort","onerror","error","createStore","dbName","storeName","dbp","then","open","onupgradeneeded","createObjectStore","txMode","callback","db","transaction","objectStore","defaultGetStore","get","key","customStore","arguments","length","undefined","store","set","value","put","setMany","entries","forEach","entry","getMany","keys","all","map","update","updater","err","del","delete","delMany","clear","eachCursor","openCursor","continue","items","cursor","push","values"],"mappings":"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","file":"src.e3b71735.js","sourceRoot":"..","sourcesContent":["/**\n * Work around Safari 14 IndexedDB open bug.\n *\n * Safari has a horrible bug where IDB requests can hang while the browser is starting up. https://bugs.webkit.org/show_bug.cgi?id=226547\n * The only solution is to keep nudging it until it's awake.\n */\nfunction idbReady() {\n    var isSafari = !navigator.userAgentData &&\n        /Safari\\//.test(navigator.userAgent) &&\n        !/Chrom(e|ium)\\//.test(navigator.userAgent);\n    // No point putting other browsers or older versions of Safari through this mess.\n    if (!isSafari || !indexedDB.databases)\n        return Promise.resolve();\n    var intervalId;\n    return new Promise(function (resolve) {\n        var tryIdb = function () { return indexedDB.databases().finally(resolve); };\n        intervalId = setInterval(tryIdb, 100);\n        tryIdb();\n    }).finally(function () { return clearInterval(intervalId); });\n}\n\nexport default idbReady;\n","import safariFix from 'safari-14-idb-fix';\n\nfunction promisifyRequest(request) {\n  return new Promise(function (resolve, reject) {\n    // @ts-ignore - file size hacks\n    request.oncomplete = request.onsuccess = function () {\n      return resolve(request.result);\n    }; // @ts-ignore - file size hacks\n\n\n    request.onabort = request.onerror = function () {\n      return reject(request.error);\n    };\n  });\n}\n\nfunction createStore(dbName, storeName) {\n  var dbp = safariFix().then(function () {\n    var request = indexedDB.open(dbName);\n\n    request.onupgradeneeded = function () {\n      return request.result.createObjectStore(storeName);\n    };\n\n    return promisifyRequest(request);\n  });\n  return function (txMode, callback) {\n    return dbp.then(function (db) {\n      return callback(db.transaction(storeName, txMode).objectStore(storeName));\n    });\n  };\n}\n\nvar defaultGetStoreFunc;\n\nfunction defaultGetStore() {\n  if (!defaultGetStoreFunc) {\n    defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n  }\n\n  return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction get(key) {\n  var customStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetStore();\n  return customStore('readonly', function (store) {\n    return promisifyRequest(store.get(key));\n  });\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction set(key, value) {\n  var customStore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetStore();\n  return customStore('readwrite', function (store) {\n    store.put(value, key);\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic â€“ if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction setMany(entries) {\n  var customStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetStore();\n  return customStore('readwrite', function (store) {\n    entries.forEach(function (entry) {\n      return store.put(entry[1], entry[0]);\n    });\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction getMany(keys) {\n  var customStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetStore();\n  return customStore('readonly', function (store) {\n    return Promise.all(keys.map(function (key) {\n      return promisifyRequest(store.get(key));\n    }));\n  });\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction update(key, updater) {\n  var customStore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetStore();\n  return customStore('readwrite', function (store) {\n    return (// Need to create the promise manually.\n      // If I try to chain promises, the transaction closes in browsers\n      // that use a promise polyfill (IE10/11).\n      new Promise(function (resolve, reject) {\n        store.get(key).onsuccess = function () {\n          try {\n            store.put(updater(this.result), key);\n            resolve(promisifyRequest(store.transaction));\n          } catch (err) {\n            reject(err);\n          }\n        };\n      })\n    );\n  });\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction del(key) {\n  var customStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetStore();\n  return customStore('readwrite', function (store) {\n    store.delete(key);\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction delMany(keys) {\n  var customStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetStore();\n  return customStore('readwrite', function (store) {\n    keys.forEach(function (key) {\n      return store.delete(key);\n    });\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction clear() {\n  var customStore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGetStore();\n  return customStore('readwrite', function (store) {\n    store.clear();\n    return promisifyRequest(store.transaction);\n  });\n}\n\nfunction eachCursor(customStore, callback) {\n  return customStore('readonly', function (store) {\n    // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n    // And openKeyCursor isn't supported by Safari.\n    store.openCursor().onsuccess = function () {\n      if (!this.result) return;\n      callback(this.result);\n      this.result.continue();\n    };\n\n    return promisifyRequest(store.transaction);\n  });\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction keys() {\n  var customStore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGetStore();\n  var items = [];\n  return eachCursor(customStore, function (cursor) {\n    return items.push(cursor.key);\n  }).then(function () {\n    return items;\n  });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction values() {\n  var customStore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGetStore();\n  var items = [];\n  return eachCursor(customStore, function (cursor) {\n    return items.push(cursor.value);\n  }).then(function () {\n    return items;\n  });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\n\n\nfunction entries() {\n  var customStore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGetStore();\n  var items = [];\n  return eachCursor(customStore, function (cursor) {\n    return items.push([cursor.key, cursor.value]);\n  }).then(function () {\n    return items;\n  });\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n","import { get, set } from 'idb-keyval';\r\n\r\nset('incidents', [{x: 1}, {y: 2}]);\r\n\r\n\r\nget('incidents').then(console.log)"]}